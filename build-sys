#!/bin/bash

if ! [ $# -eq 6 ]; then
    APP_NAME="$(basename $0)"
    echo "${APP_NAME}: usage is: ${APP_NAME} {QEMU_ARCH} {QEMU_MACH} {QEMU_CPU} {TIMEOUT} {SYS_SIZE} {IMAGE_SUBVERSION}"
    echo -e "QEMU_ARCH:\tQEMU systemn target platform (aarch64)"
    echo -e "QEMU_MACH:\tQEMU system target machine (virt,virtualization=true,kernel_irqchip=on,gic-version=3)"
    echo -e "QEMU_CPU:\tQEMU system target CPU (cortex-a53)"
    echo -e "TIMEOUT:\tBuild time in minutes before machine is powered off (60)"
    echo -e "SYS_SIZE:\tTotal system disks size in GBi (6)"
    echo -e "IMAGE_SUBVERSION:\tSuffix version for file /etc/image_version (883)"
    exit 1
fi


DT="$(date --utc --iso-8601=seconds)"
BOOTPATH="$(pwd)/${BOOTPATH:-boot}"

export VIRT_NAME="debian-stable"
export QEMU_ARCH="$1"
export QEMU_MACH="$2"
export QEMU_CPU="$3"
export QEMU_MEM="2048"
# ceiling of system image size if decimal
export QEMU_SYSCOUNT="$(echo $5|awk 'function ceil(v) { return v%1?int(v)+1:v } { a=ceil($1/1.5) } ; { print ceil(a) }')"

TIMEOUT="$((($4-5)*60))"
IMAGE_SUBVERSION="$6"

HAS_KVM="$(grep -E 'svm|vmx' /proc/cpuinfo 2>&1 >/dev/null; echo $?)"
echo -n "KVM: "
if [ "$HAS_KVM" = "0" ]; then
    echo "supported"
else
    echo "missing"
fi

rm -rf "$BOOTPATH"
mkdir "$BOOTPATH"
cp -f fetch/linux "$BOOTPATH"
cp -f fetch/initrd.gz "$BOOTPATH"

# shutdown hook
cd "$BOOTPATH"
# extract /etc/inittab
gzip -d initrd.gz
cpio -H newc -F initrd -idmv etc/inittab
# add the shutdown hook
echo '::shutdown:/onfail.sh' >>etc/inittab
# add the file back to initrd archive
echo etc/inittab|cpio -H newc -F initrd -oAv
gzip initrd
rm etc/inittab
rmdir etc
cd -

cd preseed
# set watchdog
sed "s/TIMEOUT/${TIMEOUT}/g" -i ./watchdog.sh
echo "WATCHDOG: timeout = $TIMEOUT"
# add preseed files
ls ./* \
    |cpio -H newc -R +0:+0 -o|gzip >>"$BOOTPATH/initrd.gz"
cd -

case "${QEMU_ARCH}" in
    aarch64)
	CONSOLE=ttyAMA0
	;;
    *)
	CONSOLE=ttyS0
	;;
esac
echo CONSOLE=$CONSOLE

export QEMU_KERNEL="$BOOTPATH/linux"
export QEMU_INITRD="$BOOTPATH/initrd.gz"
export QEMU_APPEND="earlyprintk=serial console=${CONSOLE} consoleblank=0 elevator=noop scsi_mod.use_blk_mq=Y net.ifnames=0 biosdevname=0 - BOOT_DEBUG=1 DEBIAN_FRONTEND=text debconf/priority=critical auto-install/enable=true IMAGE_SUBVERSION=${IMAGE_SUBVERSION}"

echo "Creating 9p shared: $BOOTPATH/data,shared"
mkdir "$BOOTPATH/data"
chmod g+w "$BOOTPATH/data"
ls -ld "$BOOTPATH/data"
export QEMU_SHARED="$BOOTPATH/data,shared"
export QEMU_DISKPATH="$BOOTPATH"

virt/mkvirt_kboot
virt/start "$VIRT_NAME"

if [ -t 0 -a -t 1 -a -t 2 ]
then
    reset
fi
